---
title: "dada2"
output: html_document
date: "2025-03-27"
---
```{r}
library(dada2);packageVersion("dada2")
library(Biostrings); packageVersion("Biostrings")
library(ShortRead); packageVersion("ShortRead")
library(ggplot2); packageVersion("ggplot2")
library(reshape2); packageVersion("reshape2")
library(gridExtra); packageVersion("gridExtra")
library(phyloseq); packageVersion("phyloseq")
library(tidyverse)
library(dplyr)
```


```{r load data}
path1 <- "C:/Users/justi/Downloads/16s" # CHANGE ME to location of the Second Replicate fastq files
path.out <- "FiguresDuplex"
path.rds <- "RDSduplex"
fns1 <- list.files(path1, pattern="fastq", full.names=TRUE)
F27 <- "AGRGTTYGATYMTGGCTCAG"
R1391 <- "GACGGGCGGTGWGTRCA"
rc <- dada2:::rc
theme_set(theme_bw())
genusPalette <- c(Bacillus="#e41a1c", Enterococcus="#377eb8", Escherichia="#4daf4a", Lactobacillus="#984ea3",
                  Listeria="#ff7f00", Pseudomonas="#ffff33", Salmonella="#a65628", Staphylococcus="#f781bf")

allOrients <- function(primer) {
    # Create all orientations of the input sequence
    require(Biostrings)
    dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
    orients <- c(Forward = dna, Complement = Biostrings::complement(dna), Reverse = Biostrings::reverse(dna),
        RevComp = Biostrings::reverseComplement(dna))
    return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(F27)
REV.orients <- allOrients(R1391)
FWD.orients
REV.orients

```

```{r}
nops1 <- file.path(path1, "noprimers", basename(fns1))


prim3 <- removePrimers(fns1, nops1, primer.fwd=F27, primer.rev=dada2:::rc(R1391), orient=TRUE, max.mismatch=5)


primerHits <- function(primer, fn) {
    # Counts number of reads in which the primer is found
    nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
    return(sum(nhits > 0))
}

# checking number of primer hits on Gut Microbiome mock community

rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = nops1[[1]]), FWD.ReverseReads = sapply(FWD.orients,
    primerHits, fn = nops1[[1]]), REV.ForwardReads = sapply(REV.orients, primerHits,
    fn = nops1[[1]]), REV.ReverseReads=sapply(REV.orients, primerHits, fn = nops1[[1]]))



filts1 <- file.path(path1, "noprimers", "filtered", basename(fns1))
##doesn't work
# plotQualityProfile(filts1[3:5])
# ggsave(filename = "primerQualityMock.pdf")
# plotQualityProfile(filts1)
# ggsave(filename = "primerQualityControls.pdf")

lens.fn <- lapply(filts1, function(fn) nchar(getSequences(fn)))
lens <- do.call(c, lens.fn)
hist(lens, 100)
track1 <- filterAndTrim(nops1, filts1, minQ=3, minLen=1000, maxLen=1450, maxN=0, rm.phix=FALSE, maxEE=10)

# # checking number of primer hits on Gut Microbiome mock community after cleaning
# 
# rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = filts1[[3]]), FWD.ReverseReads = sapply(FWD.orients,
#     primerHits, fn = filts1[[3]]), REV.ForwardReads = sapply(REV.orients, primerHits,
#     fn = filts1[[3]]))

track1

plotQualityProfile(filts1[3:5])
ggsave(filename = "filteredPrimer5Maxee10QualityMock.pdf")
plotQualityProfile(filts1)
ggsave(filename = "filteredPrimer5Maxee10QualityControls.pdf")

```


```{r}
library(dada2); packageVersion("dada2")
path <- "path/to/your/noprimers/filtered"
filtpath <- file.path(path, "filtered")
fns <- list.files(path, pattern="fastq.gz")

filterAndTrim(file.path(path,fns), file.path(filtpath,fns), 
              maxEE=5, truncQ=15, rm.phix=TRUE,
              compress=TRUE, verbose=TRUE)#, multithread=TRUE)
```
```{r}
library(dada2); packageVersion("dada2")
# File parsing
filtpath <- "path/to/your/noprimers/filtered/filtered" # CHANGE ME to the directory containing your filtered fastq files
filts <- list.files(filtpath, pattern="fastq.gz", full.names=TRUE) # CHANGE if different file extensions
sample.names <- sapply(strsplit(basename(filts), "_"), `[`, 1) # Assumes filename = sample_XXX.fastq.gz
names(filts) <- sample.names
# Learn error rates
set.seed(100)
err <- learnErrors(filts, nbases = 1e8, multithread=TRUE, randomize=TRUE)
# Infer sequence variants
dds <- vector("list", length(sample.names))
names(dds) <- sample.names
for(sam in sample.names) {
  cat("Processing:", sam, "\n")
  derep <- derepFastq(filts[[sam]])
  dds[[sam]] <- dada(derep, err=err, multithread=TRUE)
}
# Construct sequence table and write to disk
seqtab <- makeSequenceTable(dds)
saveRDS(seqtab, "path/to/your/run1/output/seqtab.rds") # CHANGE ME to where you want sequence table saved
```

```{r}
library(dada2); packageVersion("dada2")
# Merge multiple runs (if necessary)
st1 <- readRDS("path/to/your/run1/output/seqtab.rds")
st2 <- readRDS("path/to/your/run2/output/seqtab.rds")
st3 <- readRDS("path/to/your/run3/output/seqtab.rds")

rownames(st1) <- paste0("run1_", rownames(st1))
rownames(st2) <- paste0("run2_", rownames(st2))
rownames(st3) <- paste0("run3_", rownames(st3))

st.all <- mergeSequenceTables(st1, st2, st3)
# Remove chimeras
seqtab <- removeBimeraDenovo(st.all, method="consensus", multithread=TRUE)
# Assign taxonomy
tax <- assignTaxonomy(seqtab, "path/to/your/data/silva_nr_v128_train_set.fa.gz", multithread=TRUE)
# Write to disk
saveRDS(seqtab, "path/for/output/seqtab_final.rds") # CHANGE ME to where you want sequence table saved
saveRDS(tax, "path/for/outputS/tax_final.rds") # CHANGE ME ...
```
